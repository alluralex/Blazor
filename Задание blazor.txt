Вам нужно создать компонент для веб-приложения на Blazor, который будет представлять собой список задач (To-Do List). Этот компонент позволит пользователю добавлять задачи, отмечать их как выполненные, удалять задачи и фильтровать их по статусу.

Требования к функционалу:
Добавление задачи :
- Пользователь вводит текст задачи в текстовое поле и нажимает кнопку "Добавить".
- Задача сохраняется в базе данных и отображается в списке.
Отображение списка задач :
- Каждая задача показывается с чекбоксом, текстом задачи и кнопкой удаления.
- Если пользователь отмечает чекбокс, задача помечается как выполненная (текст зачеркивается).
Удаление задачи :
- У каждой задачи есть кнопка "Удалить". При нажатии задача удаляется из базы данных и исчезает из списка.
Фильтрация задач :
- Добавьте три кнопки: "Все задачи", "Выполненные" и "Невыполненные".
- При нажатии на "Выполненные" показываются только выполненные задачи.
- При нажатии на "Невыполненные" — только невыполненные.
- При нажатии на "Все задачи" — все задачи.
Сохранение состояния :
- Используйте базу данных (MSSQL или MySQL) для хранения задач.
- Все изменения (добавление, удаление, изменение статуса) сразу сохраняются в базу данных.
- При загрузке страницы задачи загружаются из базы данных.
Оформление :
- Используйте CSS или Bootstrap для красивого оформления компонента.


Шаги реализации:
Создание проекта :
- Создайте новый проект Blazor WebAssembly с использованием .NET Core 8.
Убедитесь, что установлены необходимые пакеты для работы с базой данных (например, Microsoft.EntityFrameworkCore для MSSQL или MySql.EntityFrameworkCore для MySQL).
Настройка базы данных :
Создайте таблицу в базе данных для хранения задач. Например:
CREATE TABLE Tasks (
    Id INT PRIMARY KEY AUTO_INCREMENT,
    Title NVARCHAR(255) NOT NULL,
    IsCompleted BIT NOT NULL DEFAULT 0
);
Настройте подключение к базе данных в проекте с помощью Entity Framework Core.
Разработка компонента :
- Создайте новый компонент ToDoList.razor. Встройте его в страницу Home
Реализуйте логику добавления, удаления и фильтрации задач.
- Используйте привязку данных (data binding) для взаимодействия с интерфейсом.
Работа с базой данных :
- Подключите сервис для работы с базой данных.
- При каждом изменении (добавлении, удалении или изменении статуса) обновляйте данные в базе.
- При загрузке компонента загружайте задачи из базы данных.
Тестирование :
- Протестируйте компонент на всех возможных сценариях: добавление задач, удаление, фильтрация и сохранение состояния.